import m, { Component, Attributes } from 'mithril';
import { Dropdown, FlatButton, IDropdownOptions, ModalPanel, move, uniqueId, uuid4 } from 'mithril-materialized';
import { ILayoutForm, LayoutForm, UIForm } from 'mithril-ui-form';
import '../../css/kanban.css';

export interface IKanbanI18n {
  newItem: string;
  modalDeleteItem: string;
  modalCreateNewItem: string;
  modalEditNewItem: string;
}

export interface IKanban<T extends Record<string, any>> extends Attributes {
  /**
   * Label for creating a new item
   * @deprecated Use i18n instead
   */
  label?: string;
  /** Label for creating a new item */
  i18n?: IKanbanI18n;
  /** The model representing the item's fields */
  model: UIForm<T>;
  /** The items that we want to show */
  items?: T[];
  /** Notify of changes */
  onchange?: (items: T[]) => void;
  /** If true, use a modal for editing with a fixed footer */
  fixedFooter?: boolean;
  /** Can we create and edit new items: default true */
  canEdit?: boolean;
  /** Can we sort items: default true */
  canSort?: boolean;
  /** Can we drag items - in this case, sorting is disabled: default false */
  canDrag?: boolean;
  // moveBetweenList?: boolean;
  /** Sort direction */
  sortDirection?: 'asc' | 'desc';
  /** Properties to sort */
  sortProperties?: string[];
  /** Property IDs which can always be edited, e.g. also in the list view */
  editableIds?: string[];
  /** If true, disable the item */
  disabled?: boolean;
  /**
   * Can we move items between lists (based on the same model): default false.
   * Must be enabled on both lists in order to work.
   */
  allowMoveBetweenList?: boolean;
}

interface IKanbanState<T extends Record<string, any>> extends IKanban<T> {
  /** Container ID for DatePicker and TimePicker */
  items: T[];
  containerId?: string;
  curSortId?: string;
  curItem?: T;
  updatedItem?: T;
  canSave?: boolean;
  id: string;
  editId: string;
  deleteId: string;
  /** Are we coyping or moving the item */
  copying?: boolean;
}

/** A flexible list of items, supporting drag-n-drop */
export const Kanban = <T extends Record<string, any>>(): Component<Partial<IKanban<T>>> => {
  const state = {
    id: uniqueId(),
  } as IKanbanState<T>;
  let dragIndex: number | undefined;
  let moveBetweenList = false;

  const notify = () => state.onchange && state.onchange(state.items);

  /** The drop location indicates the new position of the dropped element: above or below */
  const computeDropLocation = (target: HTMLElement, ev: DragEvent) => {
    const { top, height } = target.getBoundingClientRect();
    const y = ev.clientY - top;
    const deltaZone = height / 2;
    return y < deltaZone ? 'above' : 'below';
  };

  const getItemIndex = (target: Element): number => {
    const data = target.getAttribute('data-kanban-index');
    if (data) {
      return +data;
    } else if (target.parentElement) {
      return getItemIndex(target.parentElement);
    } else {
      return -1;
    }
  };

  const isKanbanItem = (target: Element): boolean => {
    if (/kanban__item/.test(target.className)) {
      return true;
    } else if (target.parentElement) {
      return isKanbanItem(target.parentElement);
    } else {
      return false;
    }
  };

  const getKanbanItem = (target: Element): HTMLDivElement | null => {
    if (/kanban__item/.test(target.className)) {
      return target as HTMLDivElement;
    } else if (target.parentElement) {
      return getKanbanItem(target.parentElement);
    } else {
      return null;
    }
  };

  const getNewIndex = (dropLocation: 'above' | 'below', targetIndex: number, sourceIndex: number) =>
    moveBetweenList
      ? dropLocation === 'above'
        ? targetIndex
        : targetIndex + 1
      : sourceIndex < targetIndex
      ? dropLocation === 'above'
        ? targetIndex - 1
        : targetIndex
      : dropLocation === 'above'
      ? targetIndex
      : targetIndex - 1;

  const isValidTarget = (target: HTMLElement, dropLocation: 'above' | 'below') => {
    const kanbanItem = isKanbanItem(target);
    if (!kanbanItem || typeof dragIndex === 'undefined') {
      return false;
    }
    console.log(dragIndex);
    if (moveBetweenList) {
      return true;
    }
    const targetIndex = getItemIndex(target);
    const newIndex = getNewIndex(dropLocation, targetIndex, dragIndex);
    return dragIndex !== targetIndex && newIndex !== dragIndex;
  };

  /** Autogenerate any autogenerated fields on copy */
  const processAutogeneratedFields = (item: T) => {
    const { model } = state;
    model
      .filter((f) => f.autogenerate)
      .forEach(({ id, autogenerate }) => {
        if (id) item[id] = (autogenerate === 'id' ? uniqueId() : uuid4()) as T[keyof T];
      });
  };

  const ondragstart = (ev: DragEvent) => {
    const target = ev.target as HTMLElement;
    if (ev.dataTransfer) {
      const { items } = state;
      ev.dataTransfer.effectAllowed = 'copyMove';
      dragIndex = getItemIndex(target);
      console.log(dragIndex);
      const item = items[dragIndex];
      ev.dataTransfer.setData('application/json', JSON.stringify(item, null, 2));
    }
  };

  const ondragover = (ev: DragEvent) => {
    // console.log('ondragover');
    (ev as any).redraw = false;
    ev.preventDefault();
    const target = ev.target as HTMLElement;
    const kanbanItem = getKanbanItem(target);
    if (kanbanItem && ev.dataTransfer) {
      const copying = ev.getModifierState('Control');
      kanbanItem.classList.remove('kanban__above', 'kanban__below');
      const dropLocation = computeDropLocation(kanbanItem, ev);
      if (isValidTarget(kanbanItem, dropLocation)) {
        kanbanItem.classList.add('kanban__' + dropLocation);
        state.copying = copying;
        ev.dataTransfer.dropEffect = copying ? 'copy' : 'move';
      } else {
        ev.dataTransfer.dropEffect = 'none';
      }
    }
  };

  const ondragleave = (ev: DragEvent) => {
    (ev as any).redraw = false;
    const target = ev.target as HTMLElement;
    const kanbanItem = getKanbanItem(target);
    if (kanbanItem) {
      kanbanItem.classList.remove('kanban__above', 'kanban__below');
    }
  };

  const ondrop = (ev: DragEvent) => {
    (ev as any).redraw = false;
    ev.preventDefault();
    const { copying } = state;
    console.log(dragIndex);
    const target = ev.target as HTMLElement;
    const kanbanItem = getKanbanItem(target);
    if (kanbanItem && typeof dragIndex !== 'undefined') {
      kanbanItem.classList.remove('kanban__above', 'kanban__below');
      const dropLocation = computeDropLocation(target, ev);
      const targetIndex = getItemIndex(target);
      const newIndex = getNewIndex(dropLocation, targetIndex, dragIndex);
      if (newIndex < dragIndex) {
        dragIndex++;
      }
      if (moveBetweenList && ev.dataTransfer) {
        const item = JSON.parse(ev.dataTransfer.getData('application/json')) as T;
        if (copying) {
          processAutogeneratedFields(item);
        }
        state.items.splice(newIndex, 0, item);
      } else {
        move(state.items, dragIndex, newIndex);
      }
      notify();
    }
  };

  /** ondragend is invoked on the source Kanban, also when the drop occurs in another Kanban instance. */
  const ondragend = (ev: DragEvent) => {
    if (ev.dataTransfer) {
      if (ev.dataTransfer.dropEffect === 'move' && typeof dragIndex !== 'undefined') {
        console.log(dragIndex);
        state.items.splice(dragIndex, 1);
        notify();
      }
    }
  };

  const dragOptions = {
    draggable: true,
    ondrop,
    ondragstart,
    ondragover,
    ondragleave,
    ondragend,
  };

  return {
    oninit: ({
      attrs: {
        items = [],
        canEdit = true,
        canSort = true,
        canDrag = false,
        sortDirection = 'asc',
        model = [],
        label = 'item',
        i18n = {
          newItem: `New ${label}`,
          modalDeleteItem: `Delete ${label}`,
          modalCreateNewItem: `Create new ${label}`,
          modalEditNewItem: `Edit new ${label}`,
        },
        editableIds = [],
        fixedFooter = false,
        allowMoveBetweenList = false,
      },
    }) => {
      state.items = items.map((item) => ({ ...item }));
      state.model = model;
      state.i18n = i18n;
      state.canEdit = canEdit;
      state.canSort = canSort;
      state.canDrag = canDrag;
      state.sortDirection = sortDirection as 'asc' | 'desc';
      state.fixedFooter = fixedFooter;
      state.editId = `edit_item_${state.id}`;
      state.deleteId = `delete_item_${state.id}`;
      moveBetweenList = allowMoveBetweenList;
      state.editableIds = editableIds;
      // let sortableIds = [
      //   { label: 'None' },
      //   ...model.filter((i) => i.label).map((i) => ({ label: i.label!, id: i.id })),
      // ];
    },
    view: ({ attrs: { disabled, onchange } }) => {
      const {
        model,
        items,
        canSort,
        sortDirection,
        curSortId,
        i18n,
        containerId,
        fixedFooter,
        canDrag,
        canEdit,
        // moveBetweenList,
        // sortableIds,
        editableIds,
      } = state;
      if (!model) {
        return undefined;
      }
      state.onchange = onchange;

      const dir = sortDirection === 'asc' ? 1 : -1;
      const sortedItems =
        canSort && curSortId
          ? items.sort((a, b) => (a[curSortId]! > b[curSortId]! ? dir : a[curSortId]! < b[curSortId]! ? -dir : 0))
          : items;

      // console.log(dragIndex);
      // console.log(state.id);
      let sortableIds = [
        { label: 'None' },
        ...model.filter((i) => i.label).map((i) => ({ label: i.label!, id: i.id })),
      ];

      return m('.kanban', [
        m('.row.kanban__menu', { style: 'margin-bottom: 0;' }, [
          canEdit && !disabled
            ? m(FlatButton, {
                label: i18n!.newItem,
                modalId: state.editId,
                iconName: 'add',
                onclick: () => {
                  state.curItem = undefined;
                  state.updatedItem = {} as T;
                },
              })
            : undefined,
          canSort && !canDrag && sortableIds && items.length > 1
            ? [
                m(FlatButton, {
                  iconName: 'sort',
                  iconClass: sortDirection === 'asc' ? 'left twist' : '',
                  className: 'right',
                  onclick: () => {
                    state.sortDirection = state.sortDirection === 'asc' ? 'desc' : 'asc';
                  },
                }),
                m(Dropdown, {
                  items: sortableIds,
                  checkedId: curSortId,
                  className: 'right',
                  style: 'margin: 0 auto;',
                  onchange: (id: string | number) => (state.curSortId = id as string),
                } as IDropdownOptions<string>),
              ]
            : undefined,
        ]),
        m(
          '.row.kanban__items',
          m(
            '.col.s12',
            sortedItems.length > 0 || !moveBetweenList
              ? sortedItems.map((item, i) =>
                  m(
                    `.card-panel.kanban__item[data-kanban-index=${i}]${disabled ? '.disabled' : ''}`,
                    // canDrag && !disabled ? { ...dragOptions } : {},
                    canDrag && !disabled ? { key: item.id, ...dragOptions } : { key: item.id },
                    [
                      m(
                        '.card-content',
                        m(LayoutForm, {
                          form: model,
                          obj: item,
                          containerId,
                          disabled: true,
                          editableIds,
                          onchange: (valid: boolean) => {
                            state.canSave = valid;
                            if (valid && onchange) {
                              onchange(state.items);
                            }
                          },
                        } as ILayoutForm<T>)
                      ),
                      canEdit && !disabled
                        ? m(
                            '.card-action.row',
                            m('.col.s12', [
                              m(FlatButton, {
                                iconName: 'edit',
                                modalId: state.editId,
                                onclick: () => {
                                  state.curItem = item;
                                  state.updatedItem = { ...item };
                                },
                              }),
                              m(FlatButton, {
                                iconName: 'delete',
                                modalId: state.deleteId,
                                onclick: () => (state.curItem = item),
                              }),
                            ])
                          )
                        : undefined,
                    ]
                  )
                )
              : m('.card-panel.kanban__item', { ...dragOptions })
          )
        ),
        m(ModalPanel, {
          id: state.editId,
          title: i18n!.modalCreateNewItem,
          fixedFooter,
          description: state.updatedItem
            ? m(LayoutForm, {
                form: model,
                obj: state.updatedItem || {},
                containerId,
                onchange: (valid: boolean) => {
                  state.canSave = valid;
                },
              } as ILayoutForm<T>)
            : undefined,
          buttons: [
            {
              iconName: 'cancel',
              label: 'Cancel',
            },
            {
              iconName: 'save',
              label: 'Save',
              disabled: !state.canSave,
              onclick: () => {
                if (state.curItem) {
                  const curItem = state.curItem;
                  model.forEach((f) => {
                    curItem[f.id as keyof T] = state.updatedItem![f.id as keyof T];
                  });
                } else if (state.updatedItem) {
                  state.items.push(state.updatedItem);
                }
                notify();
              },
            },
          ],
        }),
        m(ModalPanel, {
          id: state.deleteId,
          title: i18n!.modalDeleteItem,
          description: 'Are you sure?',
          buttons: [
            {
              label: 'No',
            },
            {
              label: 'Yes',
              onclick: () => {
                state.items = state.items.filter((item) => item !== state.curItem);
                notify();
              },
            },
          ],
        }),
      ]);
    },
  };
};
